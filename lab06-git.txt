Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
    Michael Stack
    Hayden Carter

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
	`git help` briefly lists useful information such as common commands.

    ```

2.  What does `-ag` cause `git help` to do?

    ```
    The `-ag` causes it to show available subcommands and guides.

    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```
    It tells you what branch you are on, how your current working tree compares to the remote GitHub repo, and any unstaged or staged modifications to files.

    ```

2.  What does `git add names.txt` do?

    ```
    It begins tracking the file and stages it to be committed in the next commit.

    ```

3.  What does `git commit -m "Add our names."` do?

    ```
    It commits the file into the git directory and thus saves the staged modified files in the version control history, which you can see in `git log`.

    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
    It adds all modified unstaged files in the current directory.

    ```

5.  What does `git commit` (without -m) do?

    ```
    It opens vim for you to write a commit message in it instead of just the command line string.

    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
    You would use the `git commit` without `-m` to write a more detailed message, and you can even add a description to the commit by writing it on other subsequent lines in the message.

    ```

7.  What does `git log do`?

    ```
    It shows the history of the last few commits made on the current selected branch.

    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
    names.txt
    This version of the edits in this file (a kind of "snapshot" of the file at time of `add`ing) will be added to the next commit and stored in version control.

    ```

    **Unstaged**

    ```
    movies.txt
    This file has been modified since its last commit, and those changes have not been added to the staging area, and thus will not be saved in version control.

    ```

    **Untracked**

    ```
    foods.txt
    This file is not being tracked nor saved in any modifications made to it, which is usually because it is a new file. Once a version of it is `add`ed to the staging area it will become tracked.

    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
    The names.txt changes will be committed.

    ```

2.  What command do you run to stage changes?

    ```
    `git add <filename>`

    ```

3.  What command do you run to unstage changes?

    ```
    Either `git commit` to save the changes to version control, or `git reset HEAD <filename>`

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```
    It displays all the differences between all the files in the working directory and the last commit on the current branch.

    ```

2.  What does `git diff --cached` display?

    ```
    It displays all the differences between all the presently staged files and the last commit on the current branch. A synonymous command is `git diff --staged`

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
    `git reset names.txt`
    `git add movies.txt`

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```
    It shows that movies.txt is both staged and unstaged, but this is actually referring to the fact that a certain new "snapshot" of the changes to movies.txt is staged whereas the working directory contains some other modified version of the file.

    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```
    It says that names.txt was deleted, and that the deletion is unstaged. If one were to stage and commit the change, then the version control would record that the file was deleted.

    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
    It says that there is one staged version of movies.txt, that the other version of movies.txt is deleted and unstaged, and now there is an untracked file last-movies.txt because we effectively created a new file by that name as far as git is concerned.

    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
    `git add movies.txt names.txt`
    `git add foods.txt last-movies.txt`
    `git commit -m "modified, renamed, and deleted some files"`

    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
    It holds the version "snapshots" of files that will be recorded into version control in the next commit.

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
    Because you want to be able to control which changes you want to commit, which is not, in general, every change every time.

    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
    It removes the last commit from version control and puts the changes that were saved in that commit back into the staging area.

    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
    It removes the last commit from version control and discards all local changes (in all local working directories) since the commit before that, and it changes the HEAD pointer to refer to that prior commit.

    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
    `--soft` preserves working directory changes and the snapshots saved in the last commit whereas `--hard` discards all commit-recorded and local changes.

    ```

3.  What do you think `HEAD` means?

    ```
    `HEAD` refers to the commit that is pointed to by a git pointer of that name, it is used to tell which commit you are on and to refer to parts of it.

    ```

4.  What do you think `HEAD^` means?

    ```
    `HEAD^` means the first parent of the commit that is referenced by `HEAD`, effectively meaning the previous commit back from the `HEAD` commit.

    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
